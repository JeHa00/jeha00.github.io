<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Jeha DevLog</title>
    <link>http://jeha00.github.io/</link>
    <description>Recent content on Jeha DevLog</description>
    <image>
      <url>http://jeha00.github.io/47</url>
      <link>http://jeha00.github.io/47</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 25 Jan 2025 17:41:06 +0900</lastBuildDate><atom:link href="http://jeha00.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>의존관계를 주입하는 여러 방법들</title>
      <link>http://jeha00.github.io/post/spring/study_3/</link>
      <pubDate>Sat, 25 Jan 2025 17:41:06 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/spring/study_3/</guid>
      <description>의존관계를 주입하는 여러 방법들에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>스프링 빈 자동 등록 방법: 컴포넌트 스캔</title>
      <link>http://jeha00.github.io/post/spring/study_2/</link>
      <pubDate>Sat, 18 Jan 2025 16:01:00 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/spring/study_2/</guid>
      <description>수동으로 스프링 빈을 등록하는 것 다음으로 @ComponentScan을 통한 스프링 빈 자동 등록하는 방법을 알아본다.</description>
    </item>
    
    <item>
      <title>스프링 컨테이너, 스프링 빈, 싱글톤 레지스트리란?</title>
      <link>http://jeha00.github.io/post/spring/study_1/</link>
      <pubDate>Sun, 15 Dec 2024 04:28:22 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/spring/study_1/</guid>
      <description>스프링 컨테이너와 스프링 빈이 무엇인지 / 빈 생성 및 등록 과정 / 스프링 컨테이너의 인터페이스의 코드 구조 / BeanDefinition / 싱글톤 설계 시 유의사항 / 스프링이 싱글톤 레지스트리가 가능한 이유 에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[Data structure] HashSet에 대해 설명해 줄게!</title>
      <link>http://jeha00.github.io/post/datastructure/hashset/</link>
      <pubDate>Sun, 10 Nov 2024 10:45:35 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/datastructure/hashset/</guid>
      <description>해시를 사용해 만든 자료구조 HashSet을 알아보자.</description>
    </item>
    
    <item>
      <title>불변형 객체를 사용하지 않을 때 발생할 수 있는 사이드 이펙트</title>
      <link>http://jeha00.github.io/post/java/8_immutable/</link>
      <pubDate>Fri, 01 Nov 2024 10:00:23 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/java/8_immutable/</guid>
      <description>불변형 객체를 사용하지 않을 때 어떠한 실수를 할 수 있는지 알아보자.</description>
    </item>
    
    <item>
      <title>[Data structure] Hash에 대해 설명해 줄게!</title>
      <link>http://jeha00.github.io/post/datastructure/hash/</link>
      <pubDate>Fri, 11 Oct 2024 10:43:21 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/datastructure/hash/</guid>
      <description>Set 자료구조에서 Hash가 필요한 이유에 관해 설명한다!</description>
    </item>
    
    <item>
      <title>[Data structure] List에 대해 설명해 줄게!</title>
      <link>http://jeha00.github.io/post/datastructure/list/</link>
      <pubDate>Mon, 30 Sep 2024 08:24:59 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/datastructure/list/</guid>
      <description>ArrayList와 LinkedList를 비교해 성능 차이를 확인한다.</description>
    </item>
    
    <item>
      <title>[Data structure] Singly LinkedList 설명해 줄게!</title>
      <link>http://jeha00.github.io/post/datastructure/linkedlist/</link>
      <pubDate>Fri, 20 Sep 2024 23:31:24 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/datastructure/linkedlist/</guid>
      <description>이번에는 LinkedList에 대해 학습한다!</description>
    </item>
    
    <item>
      <title>[Data structure] ArrayList를 설명해 줄게!</title>
      <link>http://jeha00.github.io/post/datastructure/arraylist/</link>
      <pubDate>Wed, 14 Aug 2024 12:56:04 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/datastructure/arraylist/</guid>
      <description>배열과 리스트의 차이를 학습한 후 배열기반 리스트인 ArrayList를 학습한다.</description>
    </item>
    
    <item>
      <title>모든 객체가 Object를 상속받아야 하는 이유</title>
      <link>http://jeha00.github.io/post/java/7_object/</link>
      <pubDate>Tue, 18 Jun 2024 22:50:08 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/java/7_object/</guid>
      <description>Object 클래스가 있어야 하는 이유를 정리해보자.</description>
    </item>
    
    <item>
      <title>객체 지향 5원칙 중 단일 책임 원칙(SRP)을 예제 코드에 적용해보자</title>
      <link>http://jeha00.github.io/post/java/7_srp/</link>
      <pubDate>Mon, 15 Apr 2024 01:28:04 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/java/7_srp/</guid>
      <description>객체 지향 5원칙인 SOLID 중 단일 책임 원칙인 Single Responsibility principle을 자바 코드에 적용해보자.</description>
    </item>
    
    <item>
      <title>배운 다형성이 왜 객체 지향의 중요한 특징인가?</title>
      <link>http://jeha00.github.io/post/java/6_oop/</link>
      <pubDate>Wed, 10 Apr 2024 01:24:32 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/java/6_oop/</guid>
      <description>자바의 다형적 참조가 객체 지향의 다형성을 어떻게 나타내는지 알아본다.</description>
    </item>
    
    <item>
      <title>자바의 다형적 참조, 추상 클래스 그리고 인터페이스</title>
      <link>http://jeha00.github.io/post/java/5_polymorphism/</link>
      <pubDate>Wed, 20 Mar 2024 00:34:19 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/java/5_polymorphism/</guid>
      <description>자바의 메모리 영역과 상속을 토대로 어떻게 다형성이 구현되는지, 다형성을 구현하는 방법 중 하나인 캐스팅, 그리고 효과적으로 다형성을 구현하기 위한 추상 클래스와 인터페이스에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>상속과 오버라이딩이 메모리 영역에서 어떻게 이뤄지지?</title>
      <link>http://jeha00.github.io/post/java/4_inheritance/</link>
      <pubDate>Thu, 29 Feb 2024 00:35:20 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/java/4_inheritance/</guid>
      <description>자바에서는 상속과 오버라이딩을 어떻게 만드는지와 메모리 영역에서 어떻게 작동되는지 알아본다.</description>
    </item>
    
    <item>
      <title>[Thinking] 미움 받을 용기가 없었다</title>
      <link>http://jeha00.github.io/post/thinking/courage/</link>
      <pubDate>Mon, 19 Feb 2024 22:44:12 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/thinking/courage/</guid>
      <description>미움 방을 용기가 없었다 / 강한 근성과 강한 인내심을 갖는 마법은 없다 / 과한 미움받을 용기는 잘못된 방향으로 이끈다 / 과한 미움받을 용기는 잘못된 방향으로 이끈다</description>
    </item>
    
    <item>
      <title>자바의 클래스는 메모리 영역에서는 어떻게 생성될까?</title>
      <link>http://jeha00.github.io/post/java/3_memory/</link>
      <pubDate>Thu, 15 Feb 2024 00:32:17 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/java/3_memory/</guid>
      <description>메모리의 각 메서드 영역, 스택 영역, 힙 영역에 무엇이 생성되는지 알아보고,  NullPointerException이 왜 발생하는지 알아본다.</description>
    </item>
    
    <item>
      <title>자바의 클래스에 대해 알아보자 - 2</title>
      <link>http://jeha00.github.io/post/java/2_2_class/</link>
      <pubDate>Wed, 31 Jan 2024 00:33:07 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/java/2_2_class/</guid>
      <description>생성자, 접근 제어자, 상수 변환 예약어에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>자바의 클래스에 대해 알아보자 - 1</title>
      <link>http://jeha00.github.io/post/java/2_1_class/</link>
      <pubDate>Tue, 23 Jan 2024 00:32:07 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/java/2_1_class/</guid>
      <description>클래스가 필요한 이유, 클래스 멤버 변수 그리고 메서드, 절차 지향과 객체 지향의 차이점에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>자바에서의 변수는 어떨까?</title>
      <link>http://jeha00.github.io/post/java/1_variable/</link>
      <pubDate>Sat, 20 Jan 2024 17:06:13 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/java/1_variable/</guid>
      <description>자바에서의 변수는 파이썬과 어떻게 다른지 알아보자.</description>
    </item>
    
    <item>
      <title>2022 ~ 2023 동안 노력에 대한 회고</title>
      <link>http://jeha00.github.io/post/memorior/2022_2023/</link>
      <pubDate>Tue, 02 Jan 2024 04:25:14 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/memorior/2022_2023/</guid>
      <description>2022년부터 2023년까지의 일을 회고해보았다.</description>
    </item>
    
    <item>
      <title>[TIL]OSI 7 layer: 5 ~ 7계층</title>
      <link>http://jeha00.github.io/post/network/osi_7_layer/5-7_layer/</link>
      <pubDate>Thu, 28 Dec 2023 18:23:48 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/network/osi_7_layer/5-7_layer/</guid>
      <description>OSI 7 layer의 5, 6, 7계층에 대해 알아보자.</description>
    </item>
    
    <item>
      <title>[TIL]OSI 7 layer: 4계층 전송 계층</title>
      <link>http://jeha00.github.io/post/network/osi_7_layer/4_layer/</link>
      <pubDate>Sat, 09 Dec 2023 15:50:44 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/network/osi_7_layer/4_layer/</guid>
      <description>OSI 7 layer에서 신뢰성 있는 통신을 구현하는 4계층에 대해 더 알아보자.</description>
    </item>
    
    <item>
      <title>CI/CD를 위한 github action study: workflow와 job 실행 제어하기 &amp; Jobs 와 Docker containers</title>
      <link>http://jeha00.github.io/post/ci_cd/github_action/lecture_03/</link>
      <pubDate>Fri, 11 Aug 2023 18:29:20 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/ci_cd/github_action/lecture_03/</guid>
      <description>계속 작업 중</description>
    </item>
    
    <item>
      <title>CI/CD를 위한 github action study: Activity type, filters, caching, environment variables and secrets</title>
      <link>http://jeha00.github.io/post/ci_cd/github_action/lecture_02/</link>
      <pubDate>Thu, 10 Aug 2023 22:13:42 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/ci_cd/github_action/lecture_02/</guid>
      <description>첫 번째, Activity type, filters가 뭔지 학습한다. 두 번째 Job artifacts, outputs 를 비교해보고 github actions caching을 어떻게 하면 적용할 수 있는지 알아본다. 세 번째, github action에서 환경 변수와 secrets 값을 어떻게 설정하는지 알아본다.</description>
    </item>
    
    <item>
      <title>CI/CD를 위한 github action study basic</title>
      <link>http://jeha00.github.io/post/ci_cd/github_action/lecture_01/</link>
      <pubDate>Thu, 03 Aug 2023 21:18:52 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/ci_cd/github_action/lecture_01/</guid>
      <description>github actions의 core components인 workflow, jobs, steps에 대해 알아보고 실습을 진행하면서 github action의 내장 keyword도 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL]OSI 7 layer: 3계층 네트워크 계층</title>
      <link>http://jeha00.github.io/post/network/osi_7_layer/3_layer/</link>
      <pubDate>Wed, 24 May 2023 15:14:44 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/network/osi_7_layer/3_layer/</guid>
      <description>OSI 7 layer에서 한 네트워크에서 다른 네트워크와 통신하기 위한 IP 주소를 결정하는 3계층에 대해 더 알아보자.</description>
    </item>
    
    <item>
      <title>[TIL]OSI 7 layer: 2계층 데이터 링크 계층</title>
      <link>http://jeha00.github.io/post/network/osi_7_layer/2_layer/</link>
      <pubDate>Sun, 14 May 2023 21:14:44 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/network/osi_7_layer/2_layer/</guid>
      <description>OSI 7 layer에서 &amp;lsquo;네트워크 기기&amp;rsquo; 간의 데이터 전송과 물리 주소를 결정하는 계층인 2계층에 대해 더 알아보자.</description>
    </item>
    
    <item>
      <title>[TIL]OSI 7 layer: 1계층 물리 계층</title>
      <link>http://jeha00.github.io/post/network/osi_7_layer/1_layer/</link>
      <pubDate>Sun, 07 May 2023 21:14:44 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/network/osi_7_layer/1_layer/</guid>
      <description>OSI 7 layer에서 데이터를 전기 신호로 변환하여 전송매체로 보내는 1계층에 대해 더 깊이 알아보자.</description>
    </item>
    
    <item>
      <title>Poetry 와 Pyenv의 자주 사용하는 명령어 정리</title>
      <link>http://jeha00.github.io/post/python/others/3_poetry_pyenv/</link>
      <pubDate>Fri, 31 Mar 2023 23:38:50 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/others/3_poetry_pyenv/</guid>
      <description>Poetry와 Pyenv의 자주 사용되는 명령어를 정리한다.</description>
    </item>
    
    <item>
      <title>DDD basic concept</title>
      <link>http://jeha00.github.io/post/architecture/what_is_ddd/</link>
      <pubDate>Wed, 01 Mar 2023 20:04:32 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/architecture/what_is_ddd/</guid>
      <description>DDD란 무엇이고, layer 간 의존성은 어떻게 띄고 있고, 어떻게 구성하는지에 대해 정리해본다. 또한 이를 class를 사용하여 추상화하는 이유도 정리해본다.</description>
    </item>
    
    <item>
      <title>MySQL storage engine의 종류들, Transaction, Database Lock, Isolation Level</title>
      <link>http://jeha00.github.io/post/db/wanted/lecture_02/</link>
      <pubDate>Wed, 15 Feb 2023 01:12:29 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/db/wanted/lecture_02/</guid>
      <description>MySQL storage engine들의 종류들과 default engine인 InnoDB /  Transaction이란 무엇인지 / Database Lock의 종류에는 어떤 것들이 있고, 왜 필요한지 / Isolation level에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>DB 원칙과 종류 비교(RDBMS vs NoSQL, Row vs Column oriented) 그리고 CAP Theorem</title>
      <link>http://jeha00.github.io/post/db/wanted/lecture_01/</link>
      <pubDate>Mon, 13 Feb 2023 21:54:56 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/db/wanted/lecture_01/</guid>
      <description>데이터베이스의 3가지 원칙 / 데이터베이스의 종류 RDBMS와 NoSQL의 비교 / 또 다른 분류 기준인 row oriented db와 column oriented db의 차이 / DB 선정 시 고려할 CAP Theorem 에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>클린 코드, 이제는 파이썬이다: 파이썬에서 빠지기 쉬운 함정들(Common Python Gotchas)</title>
      <link>http://jeha00.github.io/post/bookstudy/pythoncleancode/chapter08_commonpythongotchas/</link>
      <pubDate>Fri, 06 Jan 2023 19:14:21 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/bookstudy/pythoncleancode/chapter08_commonpythongotchas/</guid>
      <description>파이썬 코드를 작성하면서 빠지기 쉬운 함정들과 이에 대한 해결책을 파이썬스러운 코드를 통해 해결해본다.</description>
    </item>
    
    <item>
      <title>클린 코드, 이제는 파이썬이다: Program Jargon</title>
      <link>http://jeha00.github.io/post/bookstudy/pythoncleancode/chapter07_programjargon/</link>
      <pubDate>Tue, 27 Dec 2022 17:07:28 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/bookstudy/pythoncleancode/chapter07_programjargon/</guid>
      <description>파이썬 세상의 프로그래밍 용어에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>클린 코드, 이제는 파이썬이다: Write pythonic code</title>
      <link>http://jeha00.github.io/post/bookstudy/pythoncleancode/chapter06_writingpythoniccode/</link>
      <pubDate>Sun, 25 Dec 2022 14:09:38 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/bookstudy/pythoncleancode/chapter06_writingpythoniccode/</guid>
      <description>파이썬을 파이썬스럽게 쓰지 못하는 부분들에 대해 알아보고, 이를 어떻게 파이썬스럽게 작성할지 알아본다.</description>
    </item>
    
    <item>
      <title>클린 코드, 이제는 파이썬이다: Find code smell</title>
      <link>http://jeha00.github.io/post/bookstudy/pythoncleancode/chapter05_findingcodesmell/</link>
      <pubDate>Sat, 24 Dec 2022 14:09:21 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/bookstudy/pythoncleancode/chapter05_findingcodesmell/</guid>
      <description>code smell(코드 악취)이 나는 부분들에는 무엇이 있고, 이를 어떻게 해결해야하는지에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>Project: deployment issue - S3 CORS</title>
      <link>http://jeha00.github.io/post/project/devket/deployment/02_deployment_cors/</link>
      <pubDate>Mon, 12 Dec 2022 19:33:59 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/project/devket/deployment/02_deployment_cors/</guid>
      <description>배포 후 발생한 S3 CORS issue에 대해 알아본다. 이 과정에서 CORS란 무엇이고 이를 헤결하기 위해서 어떤 header를 어떻게 추가하는지 알아본다.</description>
    </item>
    
    <item>
      <title>Project: Docker를 사용하여 django app 배포하기</title>
      <link>http://jeha00.github.io/post/project/devket/deployment/01_deployment/</link>
      <pubDate>Thu, 08 Dec 2022 14:43:44 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/project/devket/deployment/01_deployment/</guid>
      <description>docker compose를 사용하여 nginx, gunicorn, AWS S3, AWS RDS와 연결된 django application을 배포한다. 이때, AWS S3에 접근하기 위해서 AWS IAM을 사용한다. static files에 연결하는 방식으로 3가지를 사용했다.</description>
    </item>
    
    <item>
      <title>Docker-compose로 nginx, django, postgreSQL을 연결하고 배포하기</title>
      <link>http://jeha00.github.io/post/docker/04_deployment-by-docker/</link>
      <pubDate>Thu, 08 Dec 2022 13:42:28 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/docker/04_deployment-by-docker/</guid>
      <description>docker만을 사용하여 django를 배포한 후, Dockerfile을 nginx와 djang application 에 대해 각각 만들어서 docker compose로 여러 컨테이너를 연결하여 배포하는 것을 학습해본다.</description>
    </item>
    
    <item>
      <title>Project: Payment 개발 과정에서의 고려사항들과 개발 이슈들</title>
      <link>http://jeha00.github.io/post/project/devket/django/02_payment_issues/</link>
      <pubDate>Tue, 06 Dec 2022 11:08:59 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/project/devket/django/02_payment_issues/</guid>
      <description>Payment 1차 기능을 개발하는 과정에서의 고려사항들과 개발 이슈들에 대해 정리해본다.</description>
    </item>
    
    <item>
      <title>Project: Iamport를 선택한 이유, 사용 시 결제 과정과 장점, 그리고 아임포트 javascript SDK를 사용한 결제 흐름</title>
      <link>http://jeha00.github.io/post/project/devket/django/01_payment_overall_flow/</link>
      <pubDate>Sun, 04 Dec 2022 14:56:16 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/project/devket/django/01_payment_overall_flow/</guid>
      <description>기존 결제 과정과 iamport를 사용 시 변한 결제 과정을 정리하고, iamport 사용 시 얻는 장점들에 대해 정리해본다. 마지막으로 프로젝트에서 아임포트 javascript SDK를 사용한 결제 흐름을 정리해본다.</description>
    </item>
    
    <item>
      <title>Docker command list 02</title>
      <link>http://jeha00.github.io/post/docker/00_docker-commands-02/</link>
      <pubDate>Sat, 03 Dec 2022 18:13:58 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/docker/00_docker-commands-02/</guid>
      <description>2개의 터미널을 띄어넣고, 다른 터미널에서 실행 중인 컨테이너에 접속하거나, 종료시키기. 그리고, host와 container 간에 파일을 전송하는 명령어에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>Docker command list 01</title>
      <link>http://jeha00.github.io/post/docker/00_docker-commands-01/</link>
      <pubDate>Sat, 03 Dec 2022 16:49:32 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/docker/00_docker-commands-01/</guid>
      <description>ec2를 활용한 server에 docker를 설치하고, docker image 파일 설치 및 실행 명령어부터 docker의 여러 명렁어를 정리해본다.</description>
    </item>
    
    <item>
      <title>기본 image 활용하여 나만의 custom image 만들기</title>
      <link>http://jeha00.github.io/post/docker/03_make-custom-image/</link>
      <pubDate>Sat, 03 Dec 2022 16:49:19 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/docker/03_make-custom-image/</guid>
      <description>docker run -it 으로 docker의 기본 image를 실행한 후, 이를 바탕으로 apt-get install로 여러 layer를 쌓는다. 마지막으로 docker commit으로 나만의 image를 만든다.</description>
    </item>
    
    <item>
      <title>What is a docker?</title>
      <link>http://jeha00.github.io/post/docker/02_what-is-docker/</link>
      <pubDate>Fri, 02 Dec 2022 21:52:35 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/docker/02_what-is-docker/</guid>
      <description>첫 번째, PaaS란 무엇인지, 컨테이너 가상화란 무엇인지를 통해서 docker가 무엇인지 알아본다. 두 번째, docker의 build, pull, run은 무엇을 하는 건지 알아본다.</description>
    </item>
    
    <item>
      <title>클린 코드, 이제는 파이썬이다: naming</title>
      <link>http://jeha00.github.io/post/bookstudy/pythoncleancode/chapter04_naming/</link>
      <pubDate>Mon, 28 Nov 2022 18:22:05 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/bookstudy/pythoncleancode/chapter04_naming/</guid>
      <description>알 스웨이가트가 지었고, 박재호님이 번역하신  &amp;lsquo;클린코드, 이제는 파이썬이다&amp;rsquo;를 읽고 학습한 내용이다. 이번에는 naming에 대한 가이드 라인에 대해 학습해보자.</description>
    </item>
    
    <item>
      <title>클린 코드, 이제는 파이썬이다: code formatting and black</title>
      <link>http://jeha00.github.io/post/bookstudy/pythoncleancode/chapter03_formatting./</link>
      <pubDate>Mon, 28 Nov 2022 16:19:28 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/bookstudy/pythoncleancode/chapter03_formatting./</guid>
      <description>알 스웨이가트가 지었고, 박재호님이 번역하신  &amp;lsquo;클린코드, 이제는 파이썬이다&amp;rsquo;를 읽고 학습한 내용이다. 이번에는 PEP8에서는 python code formatting을 어떤 방식으로 의무적으로 또는 권고하는지 알아보자. 마지막으로 code formatting을 위한 라이브러리인 black을 설치해본다.</description>
    </item>
    
    <item>
      <title>Project: DOM 생성과 fetch 사용을 위한 Javascript 학습 후기 및 각 과정에 일어난 개발 issues</title>
      <link>http://jeha00.github.io/post/project/devket/js/dom_fetch_issue/</link>
      <pubDate>Sun, 20 Nov 2022 18:25:52 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/project/devket/js/dom_fetch_issue/</guid>
      <description>첫 번째, DOM 생성과 fetch 사용을 위한 Javascript 학습 후기를 남겨본다. 두 번째, DOM을 조작하여 개발한 과정과 fetch를 사용하여 개발한 각 과정에서 일어난 여러 개발 issue들에 대해 정리해본다.</description>
    </item>
    
    <item>
      <title>Django study: DRF의 Policy - Throttle_scope, pagination, authentication &amp; permission</title>
      <link>http://jeha00.github.io/post/django/drf/drf_study03/</link>
      <pubDate>Wed, 09 Nov 2022 04:31:43 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/django/drf/drf_study03/</guid>
      <description>DRF에는 많은 기능들이 존재한다. 그 중에서 자주 사용하는 throttle_scope, pagination, auththentication &amp;amp; permission에 대해 학습했다.</description>
    </item>
    
    <item>
      <title>AWS study: DevOps란 무엇인가? &amp; AWS를 배워야하는 이유</title>
      <link>http://jeha00.github.io/post/aws/lecturenote01/</link>
      <pubDate>Tue, 08 Nov 2022 23:19:07 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/aws/lecturenote01/</guid>
      <description>백엔드 개발자의 업무 범위가 과거와 달리 변하면서 DevOps로 어떻게 이어지고, DevOps와 MSA가 어떻게 연결되어 있는지, 그래서 왜 AWS를 배워야하는지 알아본다.</description>
    </item>
    
    <item>
      <title>Django study: DRF의 API url 만드는 방법 3가지 - APIView, @api_view([]), ModelViewSet</title>
      <link>http://jeha00.github.io/post/django/drf/drf_study02/</link>
      <pubDate>Sat, 05 Nov 2022 13:36:56 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/django/drf/drf_study02/</guid>
      <description>API url을 만드는 방법으로 APIView, @api_view() 그리고 ModelViewSet을 사용한다. 이 방법들 중에서 자주 사용하는 방식은 APIView다. ModelViewSet은 중복을 방지하여 여러 url들을 만들어주지만, 최적화가 어렵기 때문이다.</description>
    </item>
    
    <item>
      <title>Project: Pull Request templates를 도입한 이유</title>
      <link>http://jeha00.github.io/post/project/devket/docs/why-pr-template/</link>
      <pubDate>Thu, 03 Nov 2022 13:37:52 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/project/devket/docs/why-pr-template/</guid>
      <description>프로젝트 진행에 Pull Request templates를 사용하는 이유와 적절한 PR size는 얼만큼 정했는지에 대해 공유해본다.</description>
    </item>
    
    <item>
      <title>Docker 학습을 위한 OS background knowledge</title>
      <link>http://jeha00.github.io/post/docker/01_os-for-docker/</link>
      <pubDate>Mon, 31 Oct 2022 01:00:56 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/docker/01_os-for-docker/</guid>
      <description>Docker 학습을 시작하기에 앞서 Docker가 왜 필요한지, 컴퓨터 시스템의 핵심은 무엇이고, 운영체제는 무슨 역할을 하는지, process와 thread란 무엇인지, 메모리 구조는 어떻게 구성되어 있는지, 마지막으로 컨테이너에 대해 체험해본다.</description>
    </item>
    
    <item>
      <title>Django study: DRF의 직렬화(serialization)와 역직렬화(deserialization)</title>
      <link>http://jeha00.github.io/post/django/drf/drf_study01/</link>
      <pubDate>Fri, 28 Oct 2022 13:29:58 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/django/drf/drf_study01/</guid>
      <description>RESTful API가 무엇인지, 이를 간편하게 수행하는 Django의 library인 Django-RestFramework를 소개하고, 직렬화와 역직렬화 개념을 학습한다. 마지막으로 이를 사용하기 위한 Serializer를 작성해본다.</description>
    </item>
    
    <item>
      <title>Django study: nginx와 uwsgi를 사용한 django application deployment 04 - DB 나누기</title>
      <link>http://jeha00.github.io/post/django/deployment/deployment-with-nginx-uwsgi-ec2_4/</link>
      <pubDate>Thu, 20 Oct 2022 18:45:16 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/django/deployment/deployment-with-nginx-uwsgi-ec2_4/</guid>
      <description>uwsgi, nginx 를 연결한 후, R3에 연결하여 static file을 적용했다. 그 다음으로 DB를 develop 단계와 product 단계로 나눠서 적용하기 위해 DB를 나누는 작업을 해본다.</description>
    </item>
    
    <item>
      <title>Django study: nginx와 uwsgi를 사용한 django application deployment 03 - static file 적용하기</title>
      <link>http://jeha00.github.io/post/django/deployment/deployment-with-nginx-uwsgi-ec2_3/</link>
      <pubDate>Wed, 19 Oct 2022 03:31:58 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/django/deployment/deployment-with-nginx-uwsgi-ec2_3/</guid>
      <description>uwsgi, nginx 를 연결했으니, R3에 연결하여 static file을 적용해본다.</description>
    </item>
    
    <item>
      <title>클린 코드, 이제는 파이썬이다: error and question</title>
      <link>http://jeha00.github.io/post/bookstudy/pythoncleancode/chapter01_errorandasking/</link>
      <pubDate>Mon, 17 Oct 2022 16:52:19 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/bookstudy/pythoncleancode/chapter01_errorandasking/</guid>
      <description>알 스웨이가트가 지었고, 박재호님이 번역하신  &amp;lsquo;클린코드, 이제는 파이썬이다&amp;rsquo;를 읽고 학습한 내용이다. 파이썬 에러 메세지가 어떤 내용들로 구성되어 있는지, 그리고 온라인 상에 질문을 할 때 어떻게 질문해야하는지 질문의 올바른 방법을 배운다.</description>
    </item>
    
    <item>
      <title>Django study: nginx와 uwsgi를 사용한 django application deployment 02 - 502 Bad Gateway Error</title>
      <link>http://jeha00.github.io/post/django/deployment/deployment-with-nginx-uwsgi-ec2_2/</link>
      <pubDate>Sat, 15 Oct 2022 03:28:59 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/django/deployment/deployment-with-nginx-uwsgi-ec2_2/</guid>
      <description>nginx와 uwsgi를 사용한 배포과정에서 발생한 502 Bad Gateway Error에 대한 해결과정과 해결책을 정리해본다.</description>
    </item>
    
    <item>
      <title>Django study: nginx와 uwsgi를 사용한 django application deployment 01 - nginx와 uwsgi 연결하기</title>
      <link>http://jeha00.github.io/post/django/deployment/deployment-with-nginx-uwsgi-ec2_1/</link>
      <pubDate>Fri, 14 Oct 2022 03:16:12 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/django/deployment/deployment-with-nginx-uwsgi-ec2_1/</guid>
      <description>django appliation을 nginx와 uwsgi를 사용하여 배포하는 과정을 학습한다.</description>
    </item>
    
    <item>
      <title>Clean Code: Chapter 02 변수</title>
      <link>http://jeha00.github.io/post/bookstudy/cleancode/chatper02_name/</link>
      <pubDate>Sat, 08 Oct 2022 21:15:08 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/bookstudy/cleancode/chatper02_name/</guid>
      <description>로버트 C. 마틴이 지은 클린 코드의 Chapter 02를 읽고 남긴 후기다. 변수를 지을 때 유의사항들에 알려줬고, 파이썬 코드로 코드 개선 작업을 직접 해보았다. 변수 작명에 사용자의 의도를 어떻게 명확히 드러내야하는지 알았다.</description>
    </item>
    
    <item>
      <title>Clean Code: Chapter 01 클린 코드</title>
      <link>http://jeha00.github.io/post/bookstudy/cleancode/chatper01_cleancode/</link>
      <pubDate>Thu, 06 Oct 2022 21:14:50 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/bookstudy/cleancode/chatper01_cleancode/</guid>
      <description>로버트 C. 마틴이 지은 클린 코드의 Chapter 01를 읽고 남긴 후기다. 왜 깨끗한 코드로 작성해야하는지, 이 태도를 가져야만 하는 이유에 대해 설명하는 소단원이었다. 보다 거시적인 관점으로 봤을 때, 깨끗한 코드가 시간을 절약한다.</description>
    </item>
    
    <item>
      <title>함께 자라기: 애자일로 가는 길 review</title>
      <link>http://jeha00.github.io/post/bookstudy/agile/review/</link>
      <pubDate>Mon, 19 Sep 2022 23:04:19 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/bookstudy/agile/review/</guid>
      <description>김창준님이 작성하신 함께 자라기- 애자일로 가는 길에 대한 후기</description>
    </item>
    
    <item>
      <title>[TIL]Linux: 기본 명령어 익히기 - shutdown과 그 과정</title>
      <link>http://jeha00.github.io/post/linux/lecturenote06/</link>
      <pubDate>Mon, 12 Sep 2022 15:00:46 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/linux/lecturenote06/</guid>
      <description>지난 내용에 이어서 linux의 기본 명령어로 shutdown과 이 명령어가 이뤄지는 과정에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL]Linux: 기본 명령어 익히기 - date, rdate, file, find</title>
      <link>http://jeha00.github.io/post/linux/lecturenote05/</link>
      <pubDate>Sun, 11 Sep 2022 14:50:32 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/linux/lecturenote05/</guid>
      <description>지난 내용에 이어서 linux의 기본 명령어들 중 date, rdate, file, find에 대해 학습해본다.</description>
    </item>
    
    <item>
      <title>[TIL]Linux: 기본 명령어 익히기 - cat, head, tail, more, less, nl</title>
      <link>http://jeha00.github.io/post/linux/lecturenote04/</link>
      <pubDate>Thu, 08 Sep 2022 14:50:13 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/linux/lecturenote04/</guid>
      <description>지난 내용에 이어서 linux의 기본 명령어들 중 cat, head, tail, more, less, nl에 대해 학습해본다.</description>
    </item>
    
    <item>
      <title>[TIL]Linux: 기본 명령어 익히기 - mkdir,rmdir, rm, alias, touch</title>
      <link>http://jeha00.github.io/post/linux/lecturenote03/</link>
      <pubDate>Wed, 07 Sep 2022 14:47:30 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/linux/lecturenote03/</guid>
      <description>지난 내용에 이어서 linux의 기본 명령어들 중 mkdir,rmdir, rm, alias, touch에 대해 학습해본다.</description>
    </item>
    
    <item>
      <title>Django study: 가상환경 자동 활성화를 위한 directory 구조 및 설치 경로</title>
      <link>http://jeha00.github.io/post/django/virtualenv_path/</link>
      <pubDate>Wed, 07 Sep 2022 14:37:03 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/django/virtualenv_path/</guid>
      <description>경로에 들어오면 자동적으로 가상환경이 활성화되는 directory 구조에 대해 이전 방식과 비교하여 정리해놓는다.</description>
    </item>
    
    <item>
      <title>[TIL]Linux: 기본 명령어 익히기 - pwd, cd, ls, cp, mv</title>
      <link>http://jeha00.github.io/post/linux/lecturenote02/</link>
      <pubDate>Tue, 06 Sep 2022 14:43:45 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/linux/lecturenote02/</guid>
      <description>linux의 기본 명령어들 중 pwd, cd, ls, cp, mv에 대해 학습해본다.</description>
    </item>
    
    <item>
      <title>[TIL]Linux: terminal에서 AWS ec2 instance 접속 환경 조성하기</title>
      <link>http://jeha00.github.io/post/linux/lecturenote01/</link>
      <pubDate>Mon, 05 Sep 2022 21:43:21 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/linux/lecturenote01/</guid>
      <description>aws 사이트가 아닌 terminal에서 손쉽게 aws ec2 인스턴스에 접속할 수 있는 환경을 조성해보고, 그 과정에서 error 상황과 대처법을 기록했다.</description>
    </item>
    
    <item>
      <title>[TIL]Web Application Basic study: OSI 7 layer outline</title>
      <link>http://jeha00.github.io/post/network/osi_7_layer/0_outline/</link>
      <pubDate>Tue, 30 Aug 2022 18:50:58 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/network/osi_7_layer/0_outline/</guid>
      <description>OSI 7 layer는 전체적으로 무슨 층으로, 무슨 프로토콜로, 각 계층의 데이터 타입은 무엇이고, 각 주요 기기들은 무엇인지 통합적으로 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL]Web Application Basic study: client와 server / web server structure</title>
      <link>http://jeha00.github.io/post/network/webserver/clientandserver_webserver/</link>
      <pubDate>Mon, 29 Aug 2022 17:14:46 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/network/webserver/clientandserver_webserver/</guid>
      <description>클라이언트와 서버란 무엇인지, 서버의 종류에는 무엇이 있고, 웹서버 - WSGI - 웹 애플리케이션 - DB라는 서버 구조에서 각각에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] HTML &amp; CSS study - CSS 02</title>
      <link>http://jeha00.github.io/post/html_css/study03/</link>
      <pubDate>Fri, 12 Aug 2022 22:35:43 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/html_css/study03/</guid>
      <description>Block와 Inline의 차이는 무엇이고, box의 속성 3가지인 border, padding, margin에 대해 학습한다.</description>
    </item>
    
    <item>
      <title>[TIL] Python study: Serialization 과 json.loads, dumps()  </title>
      <link>http://jeha00.github.io/post/python/others/2_loads_dumps/</link>
      <pubDate>Sun, 31 Jul 2022 23:38:50 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/others/2_loads_dumps/</guid>
      <description>Serialization이 무엇을 의미하고, 이에 따라 flat data, nested data가 무슨 형태의 data인지 알아본다. 그리고, flat data의 한 종류인 json과 관련된 module을 사용해본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 14 - GitHub Actions 체험, Octotree, GitHub CLI</title>
      <link>http://jeha00.github.io/post/git/lec_chapter14-02/</link>
      <pubDate>Fri, 29 Jul 2022 00:29:03 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter14-02/</guid>
      <description>GitHub Action이 무엇인지 체험해보고, Github repository를 살펴보는데 좋은 확장 프로그램인 &amp;lsquo;Octotree&amp;rsquo;를 사용해본다. 마지막으로 GitHub CLI를 학습해본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 14 - SSH &amp; GPG</title>
      <link>http://jeha00.github.io/post/git/lec_chapter14-01/</link>
      <pubDate>Tue, 26 Jul 2022 00:28:58 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter14-01/</guid>
      <description>SSH key를 생성하고, 계정에 등록하여 remote 추가 시 HTTP가 아닌 SSH를 사용하는 방법과 GPG key를 생성하고 계정에 등록하여 local에서 작업해도 &amp;lsquo;Verified&amp;rsquo;가 뜨는 것 실습해본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 13 - pull request &amp; issue</title>
      <link>http://jeha00.github.io/post/git/lec_chapter13/</link>
      <pubDate>Sun, 24 Jul 2022 00:12:33 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter13/</guid>
      <description>협업 시에 사용하는 GitHub pull request를 하는 방법과 GitHub issue에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] HTML &amp; CSS study - CSS 01</title>
      <link>http://jeha00.github.io/post/html_css/study02/</link>
      <pubDate>Thu, 21 Jul 2022 18:24:57 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/html_css/study02/</guid>
      <description>CSS 입력방식인 inline과 external 방식이 각각 무엇인지, css 속성값을 입력하는 방식과 html tag의 속성인 id, class를 사용하여 css 속성 값을 입력하는 방식을 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 12 - Gitmoji &amp; git submodules</title>
      <link>http://jeha00.github.io/post/git/lec_chapter12/</link>
      <pubDate>Wed, 20 Jul 2022 21:21:59 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter12/</guid>
      <description>hook을 사용하여 gitmoji 를 사용하는 방법을 학습한 후, submodule이란 무엇이고 어떠한 장점이 있는지를 학습한다. 그리고, git submodule 명령어를 통해 submodule 연결을 해본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 11 - Git bisect</title>
      <link>http://jeha00.github.io/post/git/lec_chapter11-04/</link>
      <pubDate>Tue, 19 Jul 2022 21:12:20 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter11-04/</guid>
      <description>git bisect 명령어를 통해서 이진 탐색과 commit hash number를 이용하여 오류 지점을 찾아본다.</description>
    </item>
    
    <item>
      <title>[TIL] HTML &amp; CSS study - HTML이란?</title>
      <link>http://jeha00.github.io/post/html_css/study01/</link>
      <pubDate>Mon, 18 Jul 2022 18:24:51 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/html_css/study01/</guid>
      <description>HTML, CSS가 무엇이고, 브라우저에서 무슨 역할을 하는지, html의 tag란 무엇인지, semantic tag과 non-semantic tag란 무엇인지 학습한다. 그리고, tag의 다양한 속성 중 몇 가지를 학습해본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 11 - Git blame &amp; GitLens</title>
      <link>http://jeha00.github.io/post/git/lec_chapter11-03/</link>
      <pubDate>Mon, 18 Jul 2022 15:16:52 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter11-03/</guid>
      <description>git blame 명령어와 VSC의 extension program인 GitLens를 통해 각 라인의 작성자를 확인하는 법을 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 11 - Git diff</title>
      <link>http://jeha00.github.io/post/git/lec_chapter11-02/</link>
      <pubDate>Sun, 17 Jul 2022 19:14:40 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter11-02/</guid>
      <description>git diff 명령어를 통해서 현재 파일들의 변경사항, staging area에 올라간 파일들의 변경사항, 브랜치 간의 변경사항, 커밋 간의 변경사항들 여러 관계 사이의 변경사항을 알 수 있다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 11 - Git log 자세히 알아보기</title>
      <link>http://jeha00.github.io/post/git/lec_chapter11-01/</link>
      <pubDate>Fri, 15 Jul 2022 15:07:17 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter11-01/</guid>
      <description>git log에 달려있는 여러 옵션들을 사용하여 log를 더 자세히 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 10 - Gitflow</title>
      <link>http://jeha00.github.io/post/git/lec_chapter10-05/</link>
      <pubDate>Thu, 14 Jul 2022 13:00:47 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter10-05/</guid>
      <description>협업 시 여러 branch를 생성하여 어떻게 활용하는지, 각 branch의 이름은 현업에서 주로 사용되는 이름이 있는지 Gitflow를 사용한 브랜치 활용법에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 10 - git merge --squash</title>
      <link>http://jeha00.github.io/post/git/lec_chapter10-04/</link>
      <pubDate>Wed, 13 Jul 2022 13:00:47 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter10-04/</guid>
      <description>git merge &amp;ndash;squash 명령어를 사용해서 다른 브랜치의 여러 커밋들을 rebase와 달리 하나의 커밋으로 묶어서 가져와본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 10 - git rebase --onto</title>
      <link>http://jeha00.github.io/post/git/lec_chapter10-03/</link>
      <pubDate>Tue, 12 Jul 2022 23:31:47 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter10-03/</guid>
      <description>git rebase &amp;ndash;onto 명령어를 사용하여 다른 브랜치에서 파생된 브랜치를 현재 브랜치로 옮겨서 붙여본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 10 - git cherry-pick</title>
      <link>http://jeha00.github.io/post/git/lec_chapter10-02/</link>
      <pubDate>Mon, 11 Jul 2022 23:31:47 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter10-02/</guid>
      <description>git cherry-pick 명령어를 사용하여 다른 브랜치에 있는 원하는 commit만 따오는 실습을 해본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 10 - Fast forwad vs 3-way merge</title>
      <link>http://jeha00.github.io/post/git/lec_chapter10-01/</link>
      <pubDate>Fri, 08 Jul 2022 23:31:47 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter10-01/</guid>
      <description>git의 merge 원리인 Fast-forward와 3-way merge에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 08 - git reflog</title>
      <link>http://jeha00.github.io/post/git/lec_chapter08-03/</link>
      <pubDate>Thu, 07 Jul 2022 23:31:37 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter08-03/</guid>
      <description>git reset 으로 사라진 커밋을 복구하기 위해서 git reflog 명령어를 통해 더 자세한 commit 번호를 확인 후, git reset &amp;ndash;hard 명령어를 통해서 사라진 커밋을 복구해본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 08 - git restore</title>
      <link>http://jeha00.github.io/post/git/lec_chapter08-02/</link>
      <pubDate>Wed, 06 Jul 2022 23:31:33 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter08-02/</guid>
      <description>git restore 명령어를 통해서 첫 번째, 변경 상태를 stage area에서 working directory로 돌려보는 것과 두 번째, 특정 파일을 HEAD나 커밋 해쉬번호를 사용하여 지정된 상태로 복구해보는 것을 해본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 08 - git clean</title>
      <link>http://jeha00.github.io/post/git/lec_chapter08-01/</link>
      <pubDate>Mon, 04 Jul 2022 23:31:28 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter08-01/</guid>
      <description>이번 단원에서는 git에 추적되지 않는 즉, 관리되지 않은 파일들(Untracked file)을 삭제하는 &amp;lsquo;git clean&amp;rsquo;에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 09 - git tag</title>
      <link>http://jeha00.github.io/post/git/lec_chpater09/</link>
      <pubDate>Fri, 01 Jul 2022 20:59:54 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chpater09/</guid>
      <description>v0.0.0 에서 각 자리가 무엇을 의미하는지, commit에 tag를 다는 명령어인 git tag, 그리고 여러 버전들 중 일부를 release하는 것을 배운다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 07 -  git stash &amp; git commit --amend &amp; git rebase -i</title>
      <link>http://jeha00.github.io/post/git/lec_chapter07-030405/</link>
      <pubDate>Thu, 30 Jun 2022 20:59:37 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter07-030405/</guid>
      <description>커밋하기 애매한 변화를 치워두는 명령어인 git stash, commit message를 수정하는 git commit &amp;ndash;amend, commit 과거 내역들을 수정하는 git rebase -i 를 학습한다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 07 - git add -p &amp; git commit -v</title>
      <link>http://jeha00.github.io/post/git/lec_chapter07-02/</link>
      <pubDate>Tue, 28 Jun 2022 17:44:10 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter07-02/</guid>
      <description>변경사항을 보다 쪼갠 hunk 크기로 나눠 staging area에 올리는 명령어인 git add -p 와 변경사항을 확인하고 커밋하는 git commit -v 에 대해 학습해본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 07 - Commit message 권장사항과 convention </title>
      <link>http://jeha00.github.io/post/git/lec_chapter07-01/</link>
      <pubDate>Tue, 28 Jun 2022 17:44:03 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter07-01/</guid>
      <description>commit message를 작성할 때 권장사항들과 commit message convention에 대해 학습하여 commit message를 보다 체계적으로 작성해본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 06 - git help &amp; git config</title>
      <link>http://jeha00.github.io/post/git/lec_chapter06/</link>
      <pubDate>Tue, 28 Jun 2022 17:37:08 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter06/</guid>
      <description>git 명령어가 기억나지 않아 설명서가 필요한 경우 사용하는 &lt;code&gt;git help&lt;/code&gt; 명령어와 &lt;code&gt;git config&lt;/code&gt;를 사용한 git 설정에 대해 자세히 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 05 - git checkout &amp; fetch와 pull의 차이</title>
      <link>http://jeha00.github.io/post/git/lec_chapter05-02/</link>
      <pubDate>Mon, 27 Jun 2022 21:39:43 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter05-02/</guid>
      <description>다섯 번째, Git의 HEAD를 이동하기 위해서 git checkout 명령어. 마지막으로 fetch와 pull의 차이를 학습한다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 05 - git rm, git mv 그리고, git reset의 3가지 옵션 등등</title>
      <link>http://jeha00.github.io/post/git/lec_chapter05-01/</link>
      <pubDate>Mon, 27 Jun 2022 21:39:43 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter05-01/</guid>
      <description>첫 번째 CVCS에 비해서 Git의 장점이 무엇인지, 두 번째 Git의 3가지 공간(Working directory, Staging area, Directory)이 무엇인지, 세 번째 git rm과 git mv 명령어로 파일이 어떤 영역으로 이동되는지, 네 번째 reset의 3가지 옵션에 대해 학습한다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 04 - 원격 사용하기</title>
      <link>http://jeha00.github.io/post/git/lec_chapter04/</link>
      <pubDate>Mon, 27 Jun 2022 11:29:38 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter04/</guid>
      <description>GitHub에 원격 저장소를 만들고, 원격과 로컬에서 branch를 새롭게 만들어보면서 원격 저장소로부터 pull, push를 사용하여 프로젝트를 동기화 해본다. 마지막으로 이 과정을 소스트리로 실행해본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 03 - branch</title>
      <link>http://jeha00.github.io/post/git/lec_chapter03/</link>
      <pubDate>Fri, 24 Jun 2022 14:25:18 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter03/</guid>
      <description>branch를 만든 후, 다른 branch로 이동해본다. 또한, 각 branch끼리 합치는 git merge와 git rebase를 실행하면서 CLI 와 Source tree로 branch 변화를 시각적으로 확인해본다. 마지막으로 병합 시 충돌을 해결해본다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 02 - reset vs revert</title>
      <link>http://jeha00.github.io/post/git/lec_chapter02/</link>
      <pubDate>Thu, 23 Jun 2022 11:33:57 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter02/</guid>
      <description>git add 와  git commit 으로 변경사항을 stage에 올리고, 저장해본다. 이 과정에서 vim의 몇 가지 명령어를 알아본다.  git reset &amp;ndash;hard / git revert 를 학습하여 과거 시점으로 돌아가는 걸 학습한다.</description>
    </item>
    
    <item>
      <title>[TIL] Git study: Lecture Chapter 01</title>
      <link>http://jeha00.github.io/post/git/lec_chapter01/</link>
      <pubDate>Wed, 22 Jun 2022 11:33:54 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/lec_chapter01/</guid>
      <description>Git을 배워야하는 이유, Git 최초 설정 방법 그리고, Git의 관리에서 벗어나는 .gitigonre에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[Pro git 2/E study] Git basics</title>
      <link>http://jeha00.github.io/post/git/1_gitbasics/</link>
      <pubDate>Wed, 22 Jun 2022 11:31:54 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/1_gitbasics/</guid>
      <description>첫 번째, git 저장소 만들기. 두 번째, git add 와 git status 명령어를 통해서 Git introduction에서 알아본 git의 3가지 상태와 3가지 단계를 이해해본다.</description>
    </item>
    
    <item>
      <title>[Pro git 2/E study] What is Git ?</title>
      <link>http://jeha00.github.io/post/git/0_whatisgit/</link>
      <pubDate>Tue, 21 Jun 2022 11:31:23 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/git/0_whatisgit/</guid>
      <description>Git이란 무엇이고, Git이 탄생하기까지의 VCS의 histroy에 대해 간략히 알아본다. 또한, Git의 3가지 상태와 3가지 단계를 학습한다. 마지막으로 Git의 사용자 등록 방법과 화인 방법을 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Chapter 13: 웹캐싱 기법</title>
      <link>http://jeha00.github.io/post/os/os_chapter_13_%EC%9B%B9%EC%BA%90%EC%8B%B1/</link>
      <pubDate>Tue, 31 May 2022 20:20:17 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/os/os_chapter_13_%EC%9B%B9%EC%BA%90%EC%8B%B1/</guid>
      <description>캐싱이란 무엇이고, 웹에서 사용되는 캐싱은 무엇을 목적으로 하는지, 웹캐싱이 전통적인 캐싱 기법과 무엇이 다른지, ICP는 무엇인지, 정적 웹과 동적 웹이란 무엇인지 등을 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Chapter 12: 파일 시스템 2</title>
      <link>http://jeha00.github.io/post/os/os_chapter_12_%ED%8C%8C%EC%9D%BC%EC%8B%9C%EC%8A%A4%ED%85%9C_2/</link>
      <pubDate>Sun, 29 May 2022 18:16:18 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/os/os_chapter_12_%ED%8C%8C%EC%9D%BC%EC%8B%9C%EC%8A%A4%ED%85%9C_2/</guid>
      <description>Disk의 할당방식 3가지, FAT file system이란 무엇인지, disk의 빈 공간을 어떻게 관리하는지, page cache와 buffer cache와의 차이점과 마지막으로 통합 buffer cache에서의 Memory mapped 방식에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Chapter 12: 파일 시스템 1</title>
      <link>http://jeha00.github.io/post/os/os_chapter_12_%ED%8C%8C%EC%9D%BC%EC%8B%9C%EC%8A%A4%ED%85%9C_1/</link>
      <pubDate>Sun, 29 May 2022 18:08:02 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/os/os_chapter_12_%ED%8C%8C%EC%9D%BC%EC%8B%9C%EC%8A%A4%ED%85%9C_1/</guid>
      <description>file이란 무엇이고, 이 file 관리하는 system은 무엇인지, operation은 memory와 disk 사이에서 어떤 순서로 이뤄지는지,  file protection은 어떻게 이뤄지는지, 순차 접근과 직접 접근이 무엇인지 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Chapter 11: 디스크 관리</title>
      <link>http://jeha00.github.io/post/os/os_chapter_11_%EB%94%94%EC%8A%A4%ED%81%AC%EA%B4%80%EB%A6%AC/</link>
      <pubDate>Wed, 25 May 2022 13:37:20 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/os/os_chapter_11_%EB%94%94%EC%8A%A4%ED%81%AC%EA%B4%80%EB%A6%AC/</guid>
      <description>디스크의 물리적인 구조는 어떻고, 이 디스크 스케쥴링이 왜 필요하고 어떤 알고리즘들로 스케쥴링되는지, disk의 역할 2가지는 무엇인지, 다중 디스크 상황의 장점은 무엇인지 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Chapter 10: 가상 메모리</title>
      <link>http://jeha00.github.io/post/os/os_chapter_10_%EA%B0%80%EC%83%81%EB%A9%94%EB%AA%A8%EB%A6%AC/</link>
      <pubDate>Mon, 23 May 2022 21:50:30 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/os/os_chapter_10_%EA%B0%80%EC%83%81%EB%A9%94%EB%AA%A8%EB%A6%AC/</guid>
      <description>가상 메모리를 관리하기 위한 방법으로 demanding paging에 대해 알아본다. 그리고, 페이지 교체는 어떠한 순서로 이뤄지는지, 프로세스에 프레임은 어떤 알고리즘을 통해서 할당되는지, 전역 교체와 지역교체는 무엇인지 마지막으로 thrashing 상황과 MPD 개념에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 46: Metaclass</title>
      <link>http://jeha00.github.io/post/python/python_basic_46_metaclass/</link>
      <pubDate>Tue, 17 May 2022 17:53:25 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_46_metaclass/</guid>
      <description>첫 번째,Type fuction을 통해서 Metaclass가 무엇인지, 그리고 class를 동적으로 만들어본다. 두 번째, Metaclass의 장점은 무엇이고, metaclass를 통해서 custom metaclass를 만들어본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 45: Overriding vs Overloading</title>
      <link>http://jeha00.github.io/post/python/python_basic_45_overriding_overloading/</link>
      <pubDate>Sun, 15 May 2022 20:26:29 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_45_overriding_overloading/</guid>
      <description>OOP에서 사용하는 overriding과 overloading에 대해 알아본다. 그리고, multipledispatch module을 사용하여 overloading을 구현한다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 44: Property</title>
      <link>http://jeha00.github.io/post/python/python_basic_44_property/</link>
      <pubDate>Thu, 12 May 2022 15:37:54 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_44_property/</guid>
      <description>첫 번째, method를 사용하여 getter와 setter를 구현한다. 두 번째, 첫 번째보다 pythonic way인 property를 사용하여 구현해보는데, property 방법 2가지 중 decorator를 사용하여 getter, setter, deleter를 구현해본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 43: Underscore</title>
      <link>http://jeha00.github.io/post/python/python_basic_43_underscore/</link>
      <pubDate>Wed, 11 May 2022 13:27:50 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_43_underscore/</guid>
      <description>Python에서 underscore(_)가 어떻게 쓰이는지 알아보고, 그 중에서 Access modifier 접근 지정자 Public, Protected, private 각각에 대해 알아본다. 그리고, Private의 경우, naming mangling와 연결하여 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Chapter 09: 교착 상태</title>
      <link>http://jeha00.github.io/post/os/os_chapter_09_%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C/</link>
      <pubDate>Tue, 10 May 2022 20:38:17 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/os/os_chapter_09_%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C/</guid>
      <description>교착 상태(deadlock)이란 무엇이고, deadlock 발생 조건 4가지는 무엇이며, 이에 따라 deadlock 처리 방법에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Chapter 08: 프로세스 동기화 2</title>
      <link>http://jeha00.github.io/post/os/os_chapter_08_%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4_%EB%8F%99%EA%B8%B0%ED%99%94_2/</link>
      <pubDate>Tue, 10 May 2022 20:38:04 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/os/os_chapter_08_%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4_%EB%8F%99%EA%B8%B0%ED%99%94_2/</guid>
      <description>프로세스 동기화의 전통적인 문제 3가지와 semaphore를 개선한 방법인 monitor에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Chapter 08: 프로세스 동기화 1</title>
      <link>http://jeha00.github.io/post/os/os_chapter_08_%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4_%EB%8F%99%EA%B8%B0%ED%99%94_1/</link>
      <pubDate>Wed, 04 May 2022 20:53:38 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/os/os_chapter_08_%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4_%EB%8F%99%EA%B8%B0%ED%99%94_1/</guid>
      <description>Race condition이란 무엇이고, 이 race condition은 OS에서 언제 발생되며, 이를 해결하기 위한 방법으로 SW 방법과 SW 방법에는 무엇이 있는지를 배운다. 또한, Semaphore가 무엇인지 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Chapter 07: 메모리 관리 2</title>
      <link>http://jeha00.github.io/post/os/os_chapter_07_%EB%A9%94%EB%AA%A8%EB%A6%AC%EA%B4%80%EB%A6%AC_2/</link>
      <pubDate>Thu, 28 Apr 2022 16:13:57 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/os/os_chapter_07_%EB%A9%94%EB%AA%A8%EB%A6%AC%EA%B4%80%EB%A6%AC_2/</guid>
      <description>불연속 할당 방법인 pagin 기법, segmentation 기법, paged segmentation 기법에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Chapter 07: 메모리 관리 1</title>
      <link>http://jeha00.github.io/post/os/os_chapter_07_%EB%A9%94%EB%AA%A8%EB%A6%AC%EA%B4%80%EB%A6%AC_1/</link>
      <pubDate>Thu, 28 Apr 2022 16:13:46 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/os/os_chapter_07_%EB%A9%94%EB%AA%A8%EB%A6%AC%EA%B4%80%EB%A6%AC_1/</guid>
      <description>logical address와 physical address를 어떻게 mapping하는지, 메모리 관리와 관련된 용어 4가지에 대해 알아보고, 물리적 메모리의 할당 방식 연속할당과 불연속할당 방식 중 연속할당에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Chapter 06: CPU scheduling</title>
      <link>http://jeha00.github.io/post/os/os_chapter_06_cpu_scheduling/</link>
      <pubDate>Fri, 22 Apr 2022 18:50:51 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/os/os_chapter_06_cpu_scheduling/</guid>
      <description>Bound process를 중심으로 CPU 스케쥴러가 왜 필요한지, 스케쥴링의 성능 척도는 무엇인지, CPU sheduling 알고리즘의 종류에는 무엇이 있고, 이 알고리즘 평가는 어떻게 이뤄지는지 알아보자.</description>
    </item>
    
    <item>
      <title>[TIL] Chapter 05: 프로세스 관리</title>
      <link>http://jeha00.github.io/post/os/os_chapter_05_%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4_%EA%B4%80%EB%A6%AC/</link>
      <pubDate>Mon, 18 Apr 2022 23:25:25 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/os/os_chapter_05_%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4_%EA%B4%80%EB%A6%AC/</guid>
      <description>프로세스란 무엇인지, 프로세스의 상태는 어떻게 흘러가는지, 문맥 교환이란 무엇인지, 프로세스가 어떻게 생성되고 종료되는지, 프로세스끼리 협력은 어떻게 하는지, thread는 무엇인지 알아보겠다.</description>
    </item>
    
    <item>
      <title>[TIL] Chapter 04: 프로그램의 구조와 실행</title>
      <link>http://jeha00.github.io/post/os/os_chapter_04_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98%EA%B5%AC%EC%A1%B0%EC%99%80%EC%8B%A4%ED%96%89/</link>
      <pubDate>Fri, 15 Apr 2022 00:27:39 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/os/os_chapter_04_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98%EA%B5%AC%EC%A1%B0%EC%99%80%EC%8B%A4%ED%96%89/</guid>
      <description>프로그램의 구조와 실행에 대해 설명한다. 예를 들어 프로그램의 주소영역, PCB, Program counter, 일반 명령과 특권 명령, Virtual memory, kernel mode와 user mode 등등을 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Chapter 03: 컴퓨터 시스템의 동작원리 2</title>
      <link>http://jeha00.github.io/post/os/os_chapter_03_%EC%BB%B4%ED%93%A8%ED%84%B0%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC_2/</link>
      <pubDate>Thu, 14 Apr 2022 14:54:58 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/os/os_chapter_03_%EC%BB%B4%ED%93%A8%ED%84%B0%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC_2/</guid>
      <description>입출력 구조, DMA, 저장장치의 구조 그리고 계층구조에 대해 알아본다. 또한, 하드웨어, 메모리, CPU의 각 보안 방법에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Chapter 03: 컴퓨터 시스템의 동작원리 1</title>
      <link>http://jeha00.github.io/post/os/os_chapter_03_%EC%BB%B4%ED%93%A8%ED%84%B0%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC_1/</link>
      <pubDate>Wed, 13 Apr 2022 13:55:26 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/os/os_chapter_03_%EC%BB%B4%ED%93%A8%ED%84%B0%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC_1/</guid>
      <description>I/O 연산이 무엇이고, controller와 local buffer가 무엇이고, 입출력 연산이 Interrupt를 중심으로 어떻게 진행되는지를 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 42: Context manager</title>
      <link>http://jeha00.github.io/post/python/python_basic_42_contextmanager/</link>
      <pubDate>Tue, 12 Apr 2022 13:09:09 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_42_contextmanager/</guid>
      <description>context manager가 무엇이고, 이를 with, class, decorator를 사용하여 여러 방법으로 구현해본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 41: Shallow copy &amp; Deep copy</title>
      <link>http://jeha00.github.io/post/python/python_basic_41_shallowdeepcopy/</link>
      <pubDate>Mon, 11 Apr 2022 20:18:00 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_41_shallowdeepcopy/</guid>
      <description>Shallow copy 와 Deep copy가 각각 무엇이고, 무슨 차이인지 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 40: Call by object reference</title>
      <link>http://jeha00.github.io/post/python/python_basic_40_callbyobjectreference/</link>
      <pubDate>Sun, 10 Apr 2022 15:54:18 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_40_callbyobjectreference/</guid>
      <description>python의 변수를 만드는 원리인 object reference에 대해 알아보고, 파이썬의 호출 방식인 call by object reference에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 39: Map, Filter, Reduce</title>
      <link>http://jeha00.github.io/post/python/python_basic_39_mapfilterreduce/</link>
      <pubDate>Sat, 09 Apr 2022 14:45:39 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_39_mapfilterreduce/</guid>
      <description>High-order function의 대표적인 예인 map, filter, reduce에 대해 lambda, def, closure로 구현해본다.</description>
    </item>
    
    <item>
      <title>[TIL] Introduction to Operating System</title>
      <link>http://jeha00.github.io/post/os/os_chapter_02_%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C_%EA%B0%9C%EC%9A%94/</link>
      <pubDate>Tue, 05 Apr 2022 17:43:59 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/os/os_chapter_02_%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C_%EA%B0%9C%EC%9A%94/</guid>
      <description>운영체제란 무엇이고, 무슨 역할을 하는지, 어떻게 분류되는지, 그리고 CPU, 메모리, 입출력 장치의 대략적인 관리 mechanism에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 36: Generator</title>
      <link>http://jeha00.github.io/post/python/python_basic_36_generator/</link>
      <pubDate>Fri, 01 Apr 2022 19:57:38 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_36_generator/</guid>
      <description>Generator 1에 이어서 본격적으로 Generator에 대해 알아본다. 그리고, Generator와 관련된 중요 함수들도 알아본다.</description>
    </item>
    
    <item>
      <title>Dev-Contents</title>
      <link>http://jeha00.github.io/post/dev-contents/dev-contents/</link>
      <pubDate>Thu, 31 Mar 2022 22:09:06 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/dev-contents/dev-contents/</guid>
      <description>Updated on June 17   /  개발 관련 좋은 컨텐츠를 보관하고 섭취하기</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 35: 
_
_iter
_
_과 
_
_next
_
_</title>
      <link>http://jeha00.github.io/post/python/python_basic_35_iter_next/</link>
      <pubDate>Wed, 30 Mar 2022 14:17:57 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_35_iter_next/</guid>
      <description>첫 번째, 병행성과 병렬성이란 무엇인지 각 개념에 대해 알아본다.  두 번째, Generator를 이해하기 위해 __iter__와 __next__에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 34: Decorator</title>
      <link>http://jeha00.github.io/post/python/python_basic_34_decorator/</link>
      <pubDate>Tue, 29 Mar 2022 23:34:52 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_34_decorator/</guid>
      <description>Decorator(데코레이터)가 왜 중요한지, 왜 사용해야 하는지 그리고 작성하기 어려운 지에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 33: Closure</title>
      <link>http://jeha00.github.io/post/python/python_basic_33_closure/</link>
      <pubDate>Mon, 28 Mar 2022 23:38:59 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_33_closure/</guid>
      <description>Closure를 설명하기 위해서 global variable, local variable에 추가하여 free variable에 대해 설명하고, 왜 closure가 필요한지, closure의 잘못된 사용법을 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 32: LEGB rules and Memory structures</title>
      <link>http://jeha00.github.io/post/python/python_basic_32_legb_rules/</link>
      <pubDate>Sun, 27 Mar 2022 23:53:06 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_32_legb_rules/</guid>
      <description>LEGB rules 즉 Local, Enclosing, global(or module), built-in varialbe의 scope에 대해 알아본다. 그리고, Python Memory structure가 어떤지 개괄적으로 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 31: First-class</title>
      <link>http://jeha00.github.io/post/python/python_basic_31_firstclass/</link>
      <pubDate>Fri, 25 Mar 2022 20:42:59 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_31_firstclass/</guid>
      <description>일급 함수(일급 객체, first-class)란 무엇인지 알고, 일급 함수의 예인 lambda function, Callable, Partial에 대해 알아본다.  그리고 추가적으로 Signature에 대해 간단히 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 30: Sort VS Sorted</title>
      <link>http://jeha00.github.io/post/python/python_basic_30_sortvssorted_array/</link>
      <pubDate>Thu, 24 Mar 2022 23:01:10 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_30_sortvssorted_array/</guid>
      <description>sort와 sorted의 차이를 알아보고, Array data type 에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 29: Data Model</title>
      <link>http://jeha00.github.io/post/python/python_basic_29_datamodel/</link>
      <pubDate>Wed, 23 Mar 2022 23:24:24 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_29_datamodel/</guid>
      <description>Python data model을 상세히 분류하여 mutable과 immutable의 차이가 무엇인지,  list comprehension이 무엇인지, unpacking을 tuple에 어떻게 구현하는지, immutable dictionary와 set에 대해 조금 더 깊이 알아보자.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 28: Namedtuple</title>
      <link>http://jeha00.github.io/post/python/python_basic_28_namedtuple/</link>
      <pubDate>Tue, 22 Mar 2022 09:00:37 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_28_namedtuple/</guid>
      <description>Data Model의 한 종류인 namedtuple에 대해 알아보자. namedtuple을 사용하면 key 값이 생기면서 tuple의 특징이 유지되기 때문에 클래스보다도, 딕셔너리보다도 권장되는 데이터 타입이다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 27: Special Method</title>
      <link>http://jeha00.github.io/post/python/python_basic_27_specialmethod/</link>
      <pubDate>Mon, 21 Mar 2022 17:14:36 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_27_specialmethod/</guid>
      <description>지난 번 Python basic 26 Class advanced에 이어서 class 안에 정의되는 built-in method인 special method에 대해 알아보자. 또한 파이썬의 핵심 4가지에 대해 알아보자. 마지막으로 오버라이딩을 통해서 클래스끼리 연산해보자.</description>
    </item>
    
    <item>
      <title>[TIL] HTTP Header 2</title>
      <link>http://jeha00.github.io/post/network/http/http_8/</link>
      <pubDate>Fri, 18 Mar 2022 21:51:01 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/network/http/http_8/</guid>
      <description>검증 헤더와 조건부 요청 헤더의 종류, 그중 캐시 관련 헤더에 대해서 알아본다. 그리고, 프록시 서버와 원(Origin) 서버의 차이와 캐시를 어떻게 무효화하는지 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] HTTP Header 1</title>
      <link>http://jeha00.github.io/post/network/http/http_7/</link>
      <pubDate>Thu, 17 Mar 2022 20:17:50 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/network/http/http_7/</guid>
      <description>representation, 콘텐츠 협상, 전송 방식, 일반 정보, 특별 정보, 인증 그리고 쿠키에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 26: class advanced</title>
      <link>http://jeha00.github.io/post/python/python_basic_26_class2/</link>
      <pubDate>Wed, 16 Mar 2022 14:28:39 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_26_class2/</guid>
      <description>Python basic 14의 내용을 이어서 진행한다. instance의 self가 무엇을 의미하는지, dir과 &lt;code&gt;__dict__&lt;/code&gt;가 무슨 차이인지, 또한 method 3종류인 class method, instance method 마지막으로 static method에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] HTTP status</title>
      <link>http://jeha00.github.io/post/network/http/http_6/</link>
      <pubDate>Tue, 15 Mar 2022 10:14:50 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/network/http/http_6/</guid>
      <description>HTTP status 2xx, 3xx, 4xx, 5xx에 대해 각각 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] HTTP method use</title>
      <link>http://jeha00.github.io/post/network/http/http_5/</link>
      <pubDate>Mon, 14 Mar 2022 21:41:29 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/network/http/http_5/</guid>
      <description>HTTP method를 가지고 클라이언트가 서버에 어떻게 데이터를 전송하는지, 그리고 API 설계에는 무슨 종류가 있는지 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 25: 
_
_str
_
_ vs 
_
_repr
_
_</title>
      <link>http://jeha00.github.io/post/python/python_basic_25_str_repr/</link>
      <pubDate>Sun, 13 Mar 2022 16:33:19 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_25_str_repr/</guid>
      <description>__str__ 과 __repr__ 이 각각 무엇인지, 이 둘의 차이는 무엇인지, print 함수와 __str__ 사이에는 무슨 관계가 있는지 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 24: Procedural Programming vs OOP</title>
      <link>http://jeha00.github.io/post/python/python_basic_24_oop/</link>
      <pubDate>Sat, 12 Mar 2022 23:16:27 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_24_oop/</guid>
      <description>절차형 프로그래밍과 객체지향 프로그래밍 각 방식으로 작성하여 직접 차이를 느껴본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 23:  if 
_
_name
_
_ == &#39;
_
_main
_
_&#39;</title>
      <link>http://jeha00.github.io/post/python/python_basic_23_ifnamemain/</link>
      <pubDate>Fri, 11 Mar 2022 20:33:01 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_23_ifnamemain/</guid>
      <description>&#39;
_
_name
_
_&amp;rsquo; 과 &#39;
_
_main
_
_&amp;rsquo; 를 이해한 걸 바탕으로, if
_
_name
_
_ == &#39;
_
_main
_
_&amp;rsquo; 에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] HTTP method</title>
      <link>http://jeha00.github.io/post/network/http/http_4/</link>
      <pubDate>Thu, 10 Mar 2022 20:32:24 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/network/http/http_4/</guid>
      <description>HTTP method인 GET, POST, PUT, PATCH, DELETE 그리고 속성에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] HTTP basic</title>
      <link>http://jeha00.github.io/post/network/http/http_3/</link>
      <pubDate>Wed, 09 Mar 2022 17:56:30 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/network/http/http_3/</guid>
      <description>HTTP란 무엇이고, HTTP의 특징인 클라이언트 서버 구조, stateless, connectionless, HTTP mesage에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] HTTP intro. 2: URI 와 웹 브라우저 요청 흐름</title>
      <link>http://jeha00.github.io/post/network/http/http_2/</link>
      <pubDate>Tue, 08 Mar 2022 11:50:46 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/network/http/http_2/</guid>
      <description>URI, URL, URN 에 대해 알아보고, 웹 브라우저의 요청 흐름에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] HTTP intro. 1: Internet network</title>
      <link>http://jeha00.github.io/post/network/http/http_1/</link>
      <pubDate>Mon, 07 Mar 2022 21:16:44 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/network/http/http_1/</guid>
      <description>HTTP를 학습하기 위해 사전지식으로 IP,TCP/UDP, PORT, DNS를 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 22: NoneTypeError</title>
      <link>http://jeha00.github.io/post/python/python_basic_22_nonetypeerror/</link>
      <pubDate>Sat, 05 Mar 2022 23:47:54 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_22_nonetypeerror/</guid>
      <description>Python basic 과정을 마치고, 간단한 프로젝트로 Hangman game을 만들었다. 그 과정에서 NoneTypeError가 발생했다. &amp;lsquo;TypeError:&amp;lsquo;NoneType&amp;rsquo; object is not subscriptable&amp;rsquo; 에 대해 알아보자.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 21: csv.read, write</title>
      <link>http://jeha00.github.io/post/python/python_basic_21_filereadwrite_2/</link>
      <pubDate>Fri, 04 Mar 2022 14:31:38 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_21_filereadwrite_2/</guid>
      <description>with open() as 를 사용하여 외부 csv 파일을 읽고, 쓰는 방법을 알아보자.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 20: with open as</title>
      <link>http://jeha00.github.io/post/python/python_basic_20_filewriteread_1/</link>
      <pubDate>Fri, 04 Mar 2022 14:30:38 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_20_filewriteread_1/</guid>
      <description>with open() as 함수를 사용해서 외부 파일을 읽고, 작성하는 방법을 알아보겠다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 19: external functions</title>
      <link>http://jeha00.github.io/post/python/python_basic_19_external_functions/</link>
      <pubDate>Thu, 03 Mar 2022 01:34:00 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_19_external_functions/</guid>
      <description>외장 함수를 실행하는 방법과 외장 함수의 여러 종류들을 알아보겠다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 18: built-in functions</title>
      <link>http://jeha00.github.io/post/python/python_basic_18_built_in_fuctions/</link>
      <pubDate>Thu, 03 Mar 2022 01:33:46 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_18_built_in_fuctions/</guid>
      <description>내장 함수란 무엇이고, 내장 함수에서 자주 사용된 것들로 실습을 해보겠다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 17: try ~ exception</title>
      <link>http://jeha00.github.io/post/python/python_basic_17_try_exception/</link>
      <pubDate>Thu, 03 Mar 2022 01:33:28 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_17_try_exception/</guid>
      <description>Error의 종류와 예외 처리문에 대해 알아보고, 일부러 에러를 일으키는 이유와 방법에 대해 알아보겠다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 16: package</title>
      <link>http://jeha00.github.io/post/python/python_basic_16_package/</link>
      <pubDate>Thu, 03 Mar 2022 01:32:28 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_16_package/</guid>
      <description>package란 무엇인지, package의 경로와 함수를 어떻게 실행하는지, &lt;strong&gt;init&lt;/strong&gt;.py가 존재하는 이유에 대해 알아보겠다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 15: module</title>
      <link>http://jeha00.github.io/post/python/python_basic_15_module/</link>
      <pubDate>Wed, 02 Mar 2022 00:51:30 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_15_module/</guid>
      <description>Module이란 무엇인지, Module을 어떻게 사용하는지, Module 관련 함수에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 14: class</title>
      <link>http://jeha00.github.io/post/python/python_basic_14_class/</link>
      <pubDate>Wed, 02 Mar 2022 00:51:20 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_14_class/</guid>
      <description>OOP의 의미가 무엇인지, Class와 Instance의 차이가 무엇인지, self가 무엇을 의미하는지, class variable과 instance variable에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 13: input</title>
      <link>http://jeha00.github.io/post/python/python_basic_13_input/</link>
      <pubDate>Wed, 02 Mar 2022 00:51:00 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_13_input/</guid>
      <description>input을 통한 사용자 입력과 형 변환(type conversion) 입력을 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 12: function과 Method</title>
      <link>http://jeha00.github.io/post/python/python_basic_12_method/</link>
      <pubDate>Wed, 02 Mar 2022 00:50:00 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_12_method/</guid>
      <description>함수의 중요성 및 선언, Packing &amp;amp; Unpacking, 중첩 함수(Nested function), 람바 함사(익명 함수), 함수 Type hint인 annotation 에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 11: 흐름 제어문 (while 반복문)</title>
      <link>http://jeha00.github.io/post/python/python_basic_11_while/</link>
      <pubDate>Wed, 02 Mar 2022 00:49:59 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_11_while/</guid>
      <description>While 반복문의 기본 사용법, break &amp;amp; continue 문, While ~ else 구문, 무한 반복 구문에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 10: 흐름 제어문 (for 반복문)</title>
      <link>http://jeha00.github.io/post/python/python_basic_10_for/</link>
      <pubDate>Tue, 01 Mar 2022 11:53:00 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_10_for/</guid>
      <description>for ~ range의 3가지 pattern, for문에 interable 자료형 활용하기, break 문과 continue 문 사용하기, for ~ else 구문에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 9: 흐름 제어문 (if 조건문)</title>
      <link>http://jeha00.github.io/post/python/python_basic_9_if/</link>
      <pubDate>Tue, 01 Mar 2022 11:52:55 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_9_if/</guid>
      <description>조건문의 기본 형식, 연산자를 통해서 제어하는 방법, 참거짓을 의미하는 값들, 다중 및 중첩 조건문, in &amp;amp; not in 으로 제어하는 방법을 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 8: set</title>
      <link>http://jeha00.github.io/post/python/python_basic_8_set/</link>
      <pubDate>Tue, 01 Mar 2022 11:52:52 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_8_set/</guid>
      <description>set 선언법, set type conversion, 집합 자료형 활용을 위한 함수, set type의 수정하기를 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 7: dictionary </title>
      <link>http://jeha00.github.io/post/python/python_basic_7_dictionary/</link>
      <pubDate>Tue, 01 Mar 2022 11:52:48 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_7_dictionary/</guid>
      <description>dictionary type의 선언, 출력과 수정 그리고, dictionary에 사용되는 함수에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 6: tuple</title>
      <link>http://jeha00.github.io/post/python/python_basic_6_tuple/</link>
      <pubDate>Tue, 01 Mar 2022 11:52:41 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_6_tuple/</guid>
      <description>list와 tuple의 차이. tuple의 indexing, slicing, 연산. 그리고, tuple의 중요한 특징 중 하나인 packing &amp;amp; unpacking에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 5: list</title>
      <link>http://jeha00.github.io/post/python/python_basic_5_list/</link>
      <pubDate>Mon, 28 Feb 2022 19:49:04 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_5_list/</guid>
      <description>list의 생성, indexing, slicing, 연산, list에 쓰이는 함수 그리고, list를 수정하고 삭제하는 방법에 대해 알아보겠다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 4: string</title>
      <link>http://jeha00.github.io/post/python/python_basic_4_string/</link>
      <pubDate>Mon, 28 Feb 2022 19:45:30 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_4_string/</guid>
      <description>string type의 생성부터 연산, len 함수 사용, type conversion, 문자형 함수 그리고 slicing을 알아보겠다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 3: numeric data</title>
      <link>http://jeha00.github.io/post/python/python_basic_3_numericdata/</link>
      <pubDate>Mon, 28 Feb 2022 18:51:39 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_3_numericdata/</guid>
      <description>첫 번째, python의 자료형 종류에는 무엇이 있는지 알아본다. 두 번째, 숫자형 데이터 타입의 선언, 연산, 그리고 형 변환에 대해 중점적으로 알아보겠다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 2: print 사용법</title>
      <link>http://jeha00.github.io/post/python/python_basic_2_print/</link>
      <pubDate>Mon, 28 Feb 2022 18:50:13 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_2_print/</guid>
      <description>첫 번째 print 함수를 사용할 때, separator와 end를 사용하여 다양하게 사용하는 것과 두 번째, stirng type, numeric type을 다양하게 출력을 해봄으로서 print 함수에 대해 이해해보겠다.</description>
    </item>
    
    <item>
      <title>[TIL] Python basic 1: 변수 선언</title>
      <link>http://jeha00.github.io/post/python/python_basic_1/</link>
      <pubDate>Mon, 28 Feb 2022 18:47:51 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/python/python_basic_1/</guid>
      <description>첫 번째, 기본적인 선언 방법과 동시 선언, 재선언을 알아본다. 두 번째, 각 선언에 따른 id 값을 확인하여 파이썬 내부 원리를 이해한다. 세 번째, 선언 방법의 종류인 Camel case, Pascal case, Snake case가 무엇인지 알아본다.</description>
    </item>
    
    <item>
      <title>Window에서 Hugo로 Github page 만들고 배포하기</title>
      <link>http://jeha00.github.io/post/dev-contents/hugo%EB%A1%9C-github-page-%EB%A7%8C%EB%93%A4%EA%B3%A0-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/</link>
      <pubDate>Thu, 17 Feb 2022 21:49:13 +0900</pubDate>
      
      <guid>http://jeha00.github.io/post/dev-contents/hugo%EB%A1%9C-github-page-%EB%A7%8C%EB%93%A4%EA%B3%A0-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/</guid>
      <description>SSG의 한 종류 &amp;lsquo;Hugo&amp;rsquo;와 &amp;lsquo;git remote, git submodule&amp;rsquo;로 Github page를 만든다. 그 후, 컨텐츠 생성과 업로드를 한다. 마지막으로 utterances로 댓글 기능 추가, deploy.sh를 사용하여 업로드하는 방법을 다룬다.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://jeha00.github.io/post/aws/wanted/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jeha00.github.io/post/aws/wanted/intro/</guid>
      <description>왜 많은 회사들에서 AWS 인프라를 이용하는지
AWS에서 제공하는 여러 가상 서버 서비스에 대해 논의
AWS에서 제공하는 메세지 큐와 DB를 언제 어느 인프라에 사용해야하는데
여태 배운 인프라로 간단한 서버 만들기</description>
    </item>
    
    <item>
      <title></title>
      <link>http://jeha00.github.io/post/fastapi/%EC%82%AC%EC%9A%A9%EC%9E%90%EB%AA%A8%EC%9E%84%EB%A9%94%EB%AA%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jeha00.github.io/post/fastapi/%EC%82%AC%EC%9A%A9%EC%9E%90%EB%AA%A8%EC%9E%84%EB%A9%94%EB%AA%A8/</guid>
      <description>Question 1 라우팅에 들어가는 함수를 async def 로 비동기로 만들어 사용하는 것과 그냥 def 라고 만들어서 쓰는것의 차이가 궁금힙니다. 이렇게 쓴다는건 db도 asyncSession으로 되있는걸로 사용할텐데 이걸로 하면 장점이 무엇인가요? 속도차이가 많이 나나요?
Answer 1 def 을 쓰면, 요청마다 쓰레드를 만드니, 멀티 쓰레딩에 대한 오버헤드가 나고 async def을 쓰면, 이벤트 루프 하나에 코루틴으로 핸들러를 등록하니, 멀티 쓰레딩에서 일어나는 오버헤드가 없습니다. https://fastapi.tiangolo.com/async/#asynchronous-code
속도 차이가 많이 나느냐 -&amp;gt; 요거는 실제로 async, sync로 만들고 프로덕션 서비스에서 테스트 해보신 분들이 답변해주실텐데, 보통 그렇다고들 합니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://jeha00.github.io/post/project/devket/django/db_modeling_question/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jeha00.github.io/post/project/devket/django/db_modeling_question/</guid>
      <description>models.py에서 Field로 선언되는 것들은 각 인스턴스 간에 값이 공유되는 클래스 변수가 아니라, 클래스 공간에 선언되는
디스크립터(Descriptor) 객체다.
Email model 관련 질문 authentication_check 는 인증 여부에 대한 속성값인데, pocket에서 인증하는게 있는가?
email의 EmailField에는 max_length 값이 이미 내장되어 있는데, 굳이 max_length를 입력할 필요가 있을까?
User model 관련 질문 upload_to=f&amp;quot;profile/&amp;ldquo;에서 f-string을 쓴 이유: 기억이 안나서 다시 여쭤봅니다.
password 속성에서 max_length = 15에서 128로 왜 수정했는지?
USERNAME_FIELD 를 &amp;lsquo;password&amp;rsquo;로 수정한 이유
Site model 관련 질문 thumbnail_url에서 max_length로 2000을 한 이유 url = models.</description>
    </item>
    
    
    <item>
      <title>Introduce Me. 🌱</title>
      <link>http://jeha00.github.io/me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jeha00.github.io/me/</guid>
      <description>about</description>
    </item>
    
    
  </channel>
</rss>
